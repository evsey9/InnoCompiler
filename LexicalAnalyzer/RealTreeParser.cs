// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// DateTime: 25/10/2023 08:44:28
// Input file <.\Grammar.y - 25/10/2023 08:43:30>

// options: lines report

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace LexicalAnalyzer
{
public enum Tokens {error=2,EOF=3,OpenCurlBr=4,CloseCurlBr=5,OpenRoundBr=6,
    CloseRoundBr=7,OpenSquareBr=8,CloseSquareBr=9,VarKey=10,AssignOp=11,TrueKey=12,
    FalseKey=13,AndOp=14,OrOp=15,XorOp=16,LessRel=17,MoreRel=18,
    LessEqRel=19,MoreEqRel=20,EqualRel=21,NotEqRel=22,Plus=23,Minus=24,
    Multiplication=25,Division=26,PrintKey=27,ReturnKey=28,IfKey=29,ThenKey=30,
    ElseKey=31,EndKey=32,WhileKey=33,ForKey=34,InKey=35,LoopKey=36,
    FuncKey=37,IntKey=38,RealKey=39,BoolKey=40,StringKey=41,EmptyKey=42,
    IsKey=43,ArrowKey=44,CommaSym=45,SemicolonSym=46,ColonSym=47,SequenceTerminator=48,
    OneLineComment=49,SpaceSym=50,NewLineSym=51,TabSym=52,UndefinedSymbol=53,ReadInt=54,
    ReadReal=55,ReadString=56,Dot=57,DotDot=58,Not=59,VarName=60,
    IntVar=61,RealVar=62,StringVar=63};

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<AstNode, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[94];
  private static State[] states = new State[168];
  private static string[] nonTerms = new string[] {
      "Program", "$accept", "Declaration", "Expression", "Relation", "Factor", 
      "Term", "Unary", "Primary", "TypeIndicator", "Literal", "Tail", "ExpressionList", 
      "Statement", "Assignment", "Print", "Return", "If", "Loop", "Body", "LoopBody", 
      "ArrayLiteral", "TupleLiteral", "FunctionLiteral", "TupleContent", "TupleElementList", 
      "TupleElement", "Parameters", "FunBody", "VarNameList", "DeclarationList", 
      "StatementList", };

  static Parser() {
    states[0] = new State(new int[]{10,4,3,-4},new int[]{-1,1,-3,167});
    states[1] = new State(new int[]{3,2,10,4},new int[]{-3,3});
    states[2] = new State(-1);
    states[3] = new State(-3);
    states[4] = new State(new int[]{60,5});
    states[5] = new State(new int[]{11,6,3,-5,10,-5,5,-5});
    states[6] = new State(new int[]{60,35,54,43,55,44,56,45,6,46,23,49,24,51,59,53,61,56,62,57,12,58,13,59,63,60,8,62,4,65,37,79},new int[]{-4,7,-5,9,-6,12,-7,15,-8,18,-9,21,-11,55,-22,61,-23,64,-24,78});
    states[7] = new State(new int[]{46,8});
    states[8] = new State(-6);
    states[9] = new State(new int[]{15,10,14,163,16,165,46,-10,58,-10,9,-10,45,-10,5,-10,60,-10,27,-10,28,-10,29,-10,33,-10,34,-10,7,-10,30,-10,36,-10,25,-10,26,-10,23,-10,24,-10,17,-10,18,-10,19,-10,20,-10,21,-10,22,-10});
    states[10] = new State(new int[]{60,35,54,43,55,44,56,45,6,46,23,49,24,51,59,53,61,56,62,57,12,58,13,59,63,60,8,62,4,65,37,79},new int[]{-5,11,-6,12,-7,15,-8,18,-9,21,-11,55,-22,61,-23,64,-24,78});
    states[11] = new State(-7);
    states[12] = new State(new int[]{17,13,18,153,19,155,20,157,21,159,22,161,15,-11,14,-11,16,-11,46,-11,58,-11,9,-11,45,-11,5,-11,60,-11,27,-11,28,-11,29,-11,33,-11,34,-11,7,-11,30,-11,36,-11,25,-11,26,-11,23,-11,24,-11});
    states[13] = new State(new int[]{60,35,54,43,55,44,56,45,6,46,23,49,24,51,59,53,61,56,62,57,12,58,13,59,63,60,8,62,4,65,37,79},new int[]{-6,14,-7,15,-8,18,-9,21,-11,55,-22,61,-23,64,-24,78});
    states[14] = new State(-12);
    states[15] = new State(new int[]{23,16,24,151,17,-18,18,-18,19,-18,20,-18,21,-18,22,-18,15,-18,14,-18,16,-18,46,-18,58,-18,9,-18,45,-18,5,-18,60,-18,27,-18,28,-18,29,-18,33,-18,34,-18,7,-18,30,-18,36,-18,25,-18,26,-18});
    states[16] = new State(new int[]{60,35,54,43,55,44,56,45,6,46,23,49,24,51,59,53,61,56,62,57,12,58,13,59,63,60,8,62,4,65,37,79},new int[]{-7,17,-8,18,-9,21,-11,55,-22,61,-23,64,-24,78});
    states[17] = new State(-19);
    states[18] = new State(new int[]{25,19,26,149,23,-21,24,-21,17,-21,18,-21,19,-21,20,-21,21,-21,22,-21,15,-21,14,-21,16,-21,46,-21,58,-21,9,-21,45,-21,5,-21,60,-21,27,-21,28,-21,29,-21,33,-21,34,-21,7,-21,30,-21,36,-21});
    states[19] = new State(new int[]{60,35,54,43,55,44,56,45,6,46,23,49,24,51,59,53,61,56,62,57,12,58,13,59,63,60,8,62,4,65,37,79},new int[]{-8,20,-9,21,-11,55,-22,61,-23,64,-24,78});
    states[20] = new State(-22);
    states[21] = new State(new int[]{43,22,25,-24,26,-24,23,-24,24,-24,17,-24,18,-24,19,-24,20,-24,21,-24,22,-24,15,-24,14,-24,16,-24,46,-24,58,-24,9,-24,45,-24,5,-24,60,-24,27,-24,28,-24,29,-24,33,-24,34,-24,7,-24,30,-24,36,-24});
    states[22] = new State(new int[]{38,24,39,25,40,26,41,27,42,28,8,29,4,126,37,128,60,35,54,43,55,44,56,45,6,46,23,49,24,51,59,53,61,56,62,57,12,58,13,59,63,60},new int[]{-10,23,-4,135,-5,9,-6,12,-7,15,-8,18,-9,21,-11,55,-22,61,-23,64,-24,78});
    states[23] = new State(-28);
    states[24] = new State(-56);
    states[25] = new State(-57);
    states[26] = new State(-58);
    states[27] = new State(-59);
    states[28] = new State(-60);
    states[29] = new State(new int[]{9,30,60,35,54,43,55,44,56,45,6,46,23,49,24,51,59,53,61,56,62,57,12,58,13,59,63,60,8,62,4,65,37,79},new int[]{-13,31,-4,63,-5,9,-6,12,-7,15,-8,18,-9,21,-11,55,-22,61,-23,64,-24,78});
    states[30] = new State(-61);
    states[31] = new State(new int[]{9,32,45,33});
    states[32] = new State(-73);
    states[33] = new State(new int[]{60,35,54,43,55,44,56,45,6,46,23,49,24,51,59,53,61,56,62,57,12,58,13,59,63,60,8,62,4,65,37,79},new int[]{-4,34,-5,9,-6,12,-7,15,-8,18,-9,21,-11,55,-22,61,-23,64,-24,78});
    states[34] = new State(-41);
    states[35] = new State(new int[]{57,37,8,40,6,143,43,-30,25,-30,26,-30,23,-30,24,-30,17,-30,18,-30,19,-30,20,-30,21,-30,22,-30,15,-30,14,-30,16,-30,46,-30,58,-30,9,-30,45,-30,5,-30,60,-30,27,-30,28,-30,29,-30,33,-30,34,-30,7,-30,30,-30,36,-30},new int[]{-12,36});
    states[36] = new State(-31);
    states[37] = new State(new int[]{61,38,60,39});
    states[38] = new State(-36);
    states[39] = new State(-37);
    states[40] = new State(new int[]{60,35,54,43,55,44,56,45,6,46,23,49,24,51,59,53,61,56,62,57,12,58,13,59,63,60,8,62,4,65,37,79},new int[]{-4,41,-5,9,-6,12,-7,15,-8,18,-9,21,-11,55,-22,61,-23,64,-24,78});
    states[41] = new State(new int[]{9,42});
    states[42] = new State(-38);
    states[43] = new State(-32);
    states[44] = new State(-33);
    states[45] = new State(-34);
    states[46] = new State(new int[]{60,35,54,43,55,44,56,45,6,46,23,49,24,51,59,53,61,56,62,57,12,58,13,59,63,60,8,62,4,65,37,79},new int[]{-4,47,-5,9,-6,12,-7,15,-8,18,-9,21,-11,55,-22,61,-23,64,-24,78});
    states[47] = new State(new int[]{7,48});
    states[48] = new State(-35);
    states[49] = new State(new int[]{60,35,54,43,55,44,56,45,6,46},new int[]{-9,50});
    states[50] = new State(-25);
    states[51] = new State(new int[]{60,35,54,43,55,44,56,45,6,46},new int[]{-9,52});
    states[52] = new State(-26);
    states[53] = new State(new int[]{60,35,54,43,55,44,56,45,6,46},new int[]{-9,54});
    states[54] = new State(-27);
    states[55] = new State(-29);
    states[56] = new State(-65);
    states[57] = new State(-66);
    states[58] = new State(-67);
    states[59] = new State(-68);
    states[60] = new State(-69);
    states[61] = new State(-70);
    states[62] = new State(new int[]{60,35,54,43,55,44,56,45,6,46,23,49,24,51,59,53,61,56,62,57,12,58,13,59,63,60,8,62,4,65,37,79},new int[]{-13,31,-4,63,-5,9,-6,12,-7,15,-8,18,-9,21,-11,55,-22,61,-23,64,-24,78});
    states[63] = new State(-40);
    states[64] = new State(-71);
    states[65] = new State(new int[]{8,68,5,-76},new int[]{-25,66});
    states[66] = new State(new int[]{5,67});
    states[67] = new State(-74);
    states[68] = new State(new int[]{8,73},new int[]{-26,69,-27,148});
    states[69] = new State(new int[]{9,70,45,71});
    states[70] = new State(-75);
    states[71] = new State(new int[]{8,73},new int[]{-27,72});
    states[72] = new State(-78);
    states[73] = new State(new int[]{60,74});
    states[74] = new State(new int[]{11,75});
    states[75] = new State(new int[]{60,35,54,43,55,44,56,45,6,46,23,49,24,51,59,53,61,56,62,57,12,58,13,59,63,60,8,62,4,65,37,79},new int[]{-4,76,-5,9,-6,12,-7,15,-8,18,-9,21,-11,55,-22,61,-23,64,-24,78});
    states[76] = new State(new int[]{9,77});
    states[77] = new State(-79);
    states[78] = new State(-72);
    states[79] = new State(new int[]{6,129,43,-82,44,-82},new int[]{-28,80});
    states[80] = new State(new int[]{43,82,44,146},new int[]{-29,81});
    states[81] = new State(-80);
    states[82] = new State(new int[]{4,85},new int[]{-20,83});
    states[83] = new State(new int[]{32,84});
    states[84] = new State(-85);
    states[85] = new State(new int[]{10,4,60,142,27,98,28,101,29,106,33,115,34,121,54,43,55,44,56,45,6,46,23,49,24,51,59,53,61,56,62,57,12,58,13,59,63,60,8,62,4,65,37,79},new int[]{-31,86,-32,89,-13,138,-3,140,-14,141,-15,92,-16,97,-17,100,-18,105,-19,114,-4,63,-5,9,-6,12,-7,15,-8,18,-9,21,-11,55,-22,61,-23,64,-24,78});
    states[86] = new State(new int[]{5,87,10,4},new int[]{-3,88});
    states[87] = new State(-87);
    states[88] = new State(-91);
    states[89] = new State(new int[]{5,90,60,93,27,98,28,101,29,106,33,115,34,121},new int[]{-14,91,-15,92,-16,97,-17,100,-18,105,-19,114});
    states[90] = new State(-88);
    states[91] = new State(-93);
    states[92] = new State(-42);
    states[93] = new State(new int[]{11,94});
    states[94] = new State(new int[]{60,35,54,43,55,44,56,45,6,46,23,49,24,51,59,53,61,56,62,57,12,58,13,59,63,60,8,62,4,65,37,79},new int[]{-4,95,-5,9,-6,12,-7,15,-8,18,-9,21,-11,55,-22,61,-23,64,-24,78});
    states[95] = new State(new int[]{46,96});
    states[96] = new State(-47);
    states[97] = new State(-43);
    states[98] = new State(new int[]{60,35,54,43,55,44,56,45,6,46,23,49,24,51,59,53,61,56,62,57,12,58,13,59,63,60,8,62,4,65,37,79},new int[]{-13,99,-4,63,-5,9,-6,12,-7,15,-8,18,-9,21,-11,55,-22,61,-23,64,-24,78});
    states[99] = new State(new int[]{45,33,5,-48,60,-48,27,-48,28,-48,29,-48,33,-48,34,-48});
    states[100] = new State(-44);
    states[101] = new State(new int[]{46,104,60,35,54,43,55,44,56,45,6,46,23,49,24,51,59,53,61,56,62,57,12,58,13,59,63,60,8,62,4,65,37,79},new int[]{-4,102,-5,9,-6,12,-7,15,-8,18,-9,21,-11,55,-22,61,-23,64,-24,78});
    states[102] = new State(new int[]{46,103});
    states[103] = new State(-49);
    states[104] = new State(-50);
    states[105] = new State(-45);
    states[106] = new State(new int[]{60,35,54,43,55,44,56,45,6,46,23,49,24,51,59,53,61,56,62,57,12,58,13,59,63,60,8,62,4,65,37,79},new int[]{-4,107,-5,9,-6,12,-7,15,-8,18,-9,21,-11,55,-22,61,-23,64,-24,78});
    states[107] = new State(new int[]{30,108});
    states[108] = new State(new int[]{4,85},new int[]{-20,109});
    states[109] = new State(new int[]{32,110,31,111});
    states[110] = new State(-51);
    states[111] = new State(new int[]{4,85},new int[]{-20,112});
    states[112] = new State(new int[]{32,113});
    states[113] = new State(-52);
    states[114] = new State(-46);
    states[115] = new State(new int[]{60,35,54,43,55,44,56,45,6,46,23,49,24,51,59,53,61,56,62,57,12,58,13,59,63,60,8,62,4,65,37,79},new int[]{-4,116,-5,9,-6,12,-7,15,-8,18,-9,21,-11,55,-22,61,-23,64,-24,78});
    states[116] = new State(new int[]{36,118},new int[]{-21,117});
    states[117] = new State(-53);
    states[118] = new State(new int[]{4,85},new int[]{-20,119});
    states[119] = new State(new int[]{32,120});
    states[120] = new State(-55);
    states[121] = new State(new int[]{60,122});
    states[122] = new State(new int[]{35,123});
    states[123] = new State(new int[]{38,24,39,25,40,26,41,27,42,28,8,29,4,126,37,128,60,35,54,43,55,44,56,45,6,46,23,49,24,51,59,53,61,56,62,57,12,58,13,59,63,60},new int[]{-10,124,-4,135,-5,9,-6,12,-7,15,-8,18,-9,21,-11,55,-22,61,-23,64,-24,78});
    states[124] = new State(new int[]{36,118},new int[]{-21,125});
    states[125] = new State(-54);
    states[126] = new State(new int[]{5,127,8,68},new int[]{-25,66});
    states[127] = new State(-62);
    states[128] = new State(new int[]{6,129,46,-63,58,-63,9,-63,45,-63,5,-63,60,-63,27,-63,28,-63,29,-63,33,-63,34,-63,7,-63,30,-63,36,-63,25,-63,26,-63,23,-63,24,-63,17,-63,18,-63,19,-63,20,-63,21,-63,22,-63,15,-63,14,-63,16,-63,43,-82,44,-82},new int[]{-28,80});
    states[129] = new State(new int[]{60,134},new int[]{-30,130});
    states[130] = new State(new int[]{7,131,45,132});
    states[131] = new State(-81);
    states[132] = new State(new int[]{60,133});
    states[133] = new State(-84);
    states[134] = new State(-83);
    states[135] = new State(new int[]{58,136});
    states[136] = new State(new int[]{60,35,54,43,55,44,56,45,6,46,23,49,24,51,59,53,61,56,62,57,12,58,13,59,63,60,8,62,4,65,37,79},new int[]{-4,137,-5,9,-6,12,-7,15,-8,18,-9,21,-11,55,-22,61,-23,64,-24,78});
    states[137] = new State(-64);
    states[138] = new State(new int[]{5,139,45,33});
    states[139] = new State(-89);
    states[140] = new State(-90);
    states[141] = new State(-92);
    states[142] = new State(new int[]{11,94,57,37,8,40,6,143,43,-30,25,-30,26,-30,23,-30,24,-30,17,-30,18,-30,19,-30,20,-30,21,-30,22,-30,15,-30,14,-30,16,-30,5,-30,45,-30},new int[]{-12,36});
    states[143] = new State(new int[]{60,35,54,43,55,44,56,45,6,46,23,49,24,51,59,53,61,56,62,57,12,58,13,59,63,60,8,62,4,65,37,79},new int[]{-13,144,-4,63,-5,9,-6,12,-7,15,-8,18,-9,21,-11,55,-22,61,-23,64,-24,78});
    states[144] = new State(new int[]{7,145,45,33});
    states[145] = new State(-39);
    states[146] = new State(new int[]{60,35,54,43,55,44,56,45,6,46,23,49,24,51,59,53,61,56,62,57,12,58,13,59,63,60,8,62,4,65,37,79},new int[]{-4,147,-5,9,-6,12,-7,15,-8,18,-9,21,-11,55,-22,61,-23,64,-24,78});
    states[147] = new State(-86);
    states[148] = new State(-77);
    states[149] = new State(new int[]{60,35,54,43,55,44,56,45,6,46,23,49,24,51,59,53,61,56,62,57,12,58,13,59,63,60,8,62,4,65,37,79},new int[]{-8,150,-9,21,-11,55,-22,61,-23,64,-24,78});
    states[150] = new State(-23);
    states[151] = new State(new int[]{60,35,54,43,55,44,56,45,6,46,23,49,24,51,59,53,61,56,62,57,12,58,13,59,63,60,8,62,4,65,37,79},new int[]{-7,152,-8,18,-9,21,-11,55,-22,61,-23,64,-24,78});
    states[152] = new State(-20);
    states[153] = new State(new int[]{60,35,54,43,55,44,56,45,6,46,23,49,24,51,59,53,61,56,62,57,12,58,13,59,63,60,8,62,4,65,37,79},new int[]{-6,154,-7,15,-8,18,-9,21,-11,55,-22,61,-23,64,-24,78});
    states[154] = new State(-13);
    states[155] = new State(new int[]{60,35,54,43,55,44,56,45,6,46,23,49,24,51,59,53,61,56,62,57,12,58,13,59,63,60,8,62,4,65,37,79},new int[]{-6,156,-7,15,-8,18,-9,21,-11,55,-22,61,-23,64,-24,78});
    states[156] = new State(-14);
    states[157] = new State(new int[]{60,35,54,43,55,44,56,45,6,46,23,49,24,51,59,53,61,56,62,57,12,58,13,59,63,60,8,62,4,65,37,79},new int[]{-6,158,-7,15,-8,18,-9,21,-11,55,-22,61,-23,64,-24,78});
    states[158] = new State(-15);
    states[159] = new State(new int[]{60,35,54,43,55,44,56,45,6,46,23,49,24,51,59,53,61,56,62,57,12,58,13,59,63,60,8,62,4,65,37,79},new int[]{-6,160,-7,15,-8,18,-9,21,-11,55,-22,61,-23,64,-24,78});
    states[160] = new State(-16);
    states[161] = new State(new int[]{60,35,54,43,55,44,56,45,6,46,23,49,24,51,59,53,61,56,62,57,12,58,13,59,63,60,8,62,4,65,37,79},new int[]{-6,162,-7,15,-8,18,-9,21,-11,55,-22,61,-23,64,-24,78});
    states[162] = new State(-17);
    states[163] = new State(new int[]{60,35,54,43,55,44,56,45,6,46,23,49,24,51,59,53,61,56,62,57,12,58,13,59,63,60,8,62,4,65,37,79},new int[]{-5,164,-6,12,-7,15,-8,18,-9,21,-11,55,-22,61,-23,64,-24,78});
    states[164] = new State(-8);
    states[165] = new State(new int[]{60,35,54,43,55,44,56,45,6,46,23,49,24,51,59,53,61,56,62,57,12,58,13,59,63,60,8,62,4,65,37,79},new int[]{-5,166,-6,12,-7,15,-8,18,-9,21,-11,55,-22,61,-23,64,-24,78});
    states[166] = new State(-9);
    states[167] = new State(-2);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{-3});
    rules[3] = new Rule(-1, new int[]{-1,-3});
    rules[4] = new Rule(-1, new int[]{});
    rules[5] = new Rule(-3, new int[]{10,60});
    rules[6] = new Rule(-3, new int[]{10,60,11,-4,46});
    rules[7] = new Rule(-4, new int[]{-5,15,-5});
    rules[8] = new Rule(-4, new int[]{-5,14,-5});
    rules[9] = new Rule(-4, new int[]{-5,16,-5});
    rules[10] = new Rule(-4, new int[]{-5});
    rules[11] = new Rule(-5, new int[]{-6});
    rules[12] = new Rule(-5, new int[]{-6,17,-6});
    rules[13] = new Rule(-5, new int[]{-6,18,-6});
    rules[14] = new Rule(-5, new int[]{-6,19,-6});
    rules[15] = new Rule(-5, new int[]{-6,20,-6});
    rules[16] = new Rule(-5, new int[]{-6,21,-6});
    rules[17] = new Rule(-5, new int[]{-6,22,-6});
    rules[18] = new Rule(-6, new int[]{-7});
    rules[19] = new Rule(-6, new int[]{-7,23,-7});
    rules[20] = new Rule(-6, new int[]{-7,24,-7});
    rules[21] = new Rule(-7, new int[]{-8});
    rules[22] = new Rule(-7, new int[]{-8,25,-8});
    rules[23] = new Rule(-7, new int[]{-8,26,-8});
    rules[24] = new Rule(-8, new int[]{-9});
    rules[25] = new Rule(-8, new int[]{23,-9});
    rules[26] = new Rule(-8, new int[]{24,-9});
    rules[27] = new Rule(-8, new int[]{59,-9});
    rules[28] = new Rule(-8, new int[]{-9,43,-10});
    rules[29] = new Rule(-8, new int[]{-11});
    rules[30] = new Rule(-9, new int[]{60});
    rules[31] = new Rule(-9, new int[]{60,-12});
    rules[32] = new Rule(-9, new int[]{54});
    rules[33] = new Rule(-9, new int[]{55});
    rules[34] = new Rule(-9, new int[]{56});
    rules[35] = new Rule(-9, new int[]{6,-4,7});
    rules[36] = new Rule(-12, new int[]{57,61});
    rules[37] = new Rule(-12, new int[]{57,60});
    rules[38] = new Rule(-12, new int[]{8,-4,9});
    rules[39] = new Rule(-12, new int[]{6,-13,7});
    rules[40] = new Rule(-13, new int[]{-4});
    rules[41] = new Rule(-13, new int[]{-13,45,-4});
    rules[42] = new Rule(-14, new int[]{-15});
    rules[43] = new Rule(-14, new int[]{-16});
    rules[44] = new Rule(-14, new int[]{-17});
    rules[45] = new Rule(-14, new int[]{-18});
    rules[46] = new Rule(-14, new int[]{-19});
    rules[47] = new Rule(-15, new int[]{60,11,-4,46});
    rules[48] = new Rule(-16, new int[]{27,-13});
    rules[49] = new Rule(-17, new int[]{28,-4,46});
    rules[50] = new Rule(-17, new int[]{28,46});
    rules[51] = new Rule(-18, new int[]{29,-4,30,-20,32});
    rules[52] = new Rule(-18, new int[]{29,-4,30,-20,31,-20,32});
    rules[53] = new Rule(-19, new int[]{33,-4,-21});
    rules[54] = new Rule(-19, new int[]{34,60,35,-10,-21});
    rules[55] = new Rule(-21, new int[]{36,-20,32});
    rules[56] = new Rule(-10, new int[]{38});
    rules[57] = new Rule(-10, new int[]{39});
    rules[58] = new Rule(-10, new int[]{40});
    rules[59] = new Rule(-10, new int[]{41});
    rules[60] = new Rule(-10, new int[]{42});
    rules[61] = new Rule(-10, new int[]{8,9});
    rules[62] = new Rule(-10, new int[]{4,5});
    rules[63] = new Rule(-10, new int[]{37});
    rules[64] = new Rule(-10, new int[]{-4,58,-4});
    rules[65] = new Rule(-11, new int[]{61});
    rules[66] = new Rule(-11, new int[]{62});
    rules[67] = new Rule(-11, new int[]{12});
    rules[68] = new Rule(-11, new int[]{13});
    rules[69] = new Rule(-11, new int[]{63});
    rules[70] = new Rule(-11, new int[]{-22});
    rules[71] = new Rule(-11, new int[]{-23});
    rules[72] = new Rule(-11, new int[]{-24});
    rules[73] = new Rule(-22, new int[]{8,-13,9});
    rules[74] = new Rule(-23, new int[]{4,-25,5});
    rules[75] = new Rule(-25, new int[]{8,-26,9});
    rules[76] = new Rule(-25, new int[]{});
    rules[77] = new Rule(-26, new int[]{-27});
    rules[78] = new Rule(-26, new int[]{-26,45,-27});
    rules[79] = new Rule(-27, new int[]{8,60,11,-4,9});
    rules[80] = new Rule(-24, new int[]{37,-28,-29});
    rules[81] = new Rule(-28, new int[]{6,-30,7});
    rules[82] = new Rule(-28, new int[]{});
    rules[83] = new Rule(-30, new int[]{60});
    rules[84] = new Rule(-30, new int[]{-30,45,60});
    rules[85] = new Rule(-29, new int[]{43,-20,32});
    rules[86] = new Rule(-29, new int[]{44,-4});
    rules[87] = new Rule(-20, new int[]{4,-31,5});
    rules[88] = new Rule(-20, new int[]{4,-32,5});
    rules[89] = new Rule(-20, new int[]{4,-13,5});
    rules[90] = new Rule(-31, new int[]{-3});
    rules[91] = new Rule(-31, new int[]{-31,-3});
    rules[92] = new Rule(-32, new int[]{-14});
    rules[93] = new Rule(-32, new int[]{-32,-14});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // Program -> Declaration
#line 24 ".\Grammar.y"
                     { CurrentSemanticValue = new ProgramNode((DeclarationNode)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 3: // Program -> Program, Declaration
#line 25 ".\Grammar.y"
                             { CurrentSemanticValue = ((ProgramNode)ValueStack[ValueStack.Depth-2]).AddDeclaration((DeclarationNode)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 4: // Program -> /* empty */
#line 26 ".\Grammar.y"
                     { CurrentSemanticValue = new ProgramNode(); }
#line default
        break;
      case 5: // Declaration -> VarKey, VarName
#line 29 ".\Grammar.y"
                            { CurrentSemanticValue = new DeclarationNode(ValueStack[ValueStack.Depth-1], null); }
#line default
        break;
      case 6: // Declaration -> VarKey, VarName, AssignOp, Expression, SemicolonSym
#line 30 ".\Grammar.y"
                                                            { CurrentSemanticValue = new DeclarationNode(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 7: // Expression -> Relation, OrOp, Relation
#line 33 ".\Grammar.y"
                                   { CurrentSemanticValue = new BinaryExpressionNode(ValueStack[ValueStack.Depth-3], BinaryOperator.Or, ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 8: // Expression -> Relation, AndOp, Relation
#line 34 ".\Grammar.y"
                                    { CurrentSemanticValue = new BinaryExpressionNode(ValueStack[ValueStack.Depth-3], BinaryOperator.And, ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 9: // Expression -> Relation, XorOp, Relation
#line 35 ".\Grammar.y"
                                    { CurrentSemanticValue = new BinaryExpressionNode(ValueStack[ValueStack.Depth-3], BinaryOperator.Xor, ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 10: // Expression -> Relation
#line 36 ".\Grammar.y"
                      { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 11: // Relation -> Factor
#line 39 ".\Grammar.y"
                 { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 12: // Relation -> Factor, LessRel, Factor
#line 40 ".\Grammar.y"
                                { CurrentSemanticValue = new BinaryExpressionNode(ValueStack[ValueStack.Depth-3], BinaryOperator.Less, ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 13: // Relation -> Factor, MoreRel, Factor
#line 41 ".\Grammar.y"
                                { CurrentSemanticValue = new BinaryExpressionNode(ValueStack[ValueStack.Depth-3], BinaryOperator.More, ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 14: // Relation -> Factor, LessEqRel, Factor
#line 42 ".\Grammar.y"
                                  { CurrentSemanticValue = new BinaryExpressionNode(ValueStack[ValueStack.Depth-3], BinaryOperator.LessOrEqual, ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 15: // Relation -> Factor, MoreEqRel, Factor
#line 43 ".\Grammar.y"
                                  { CurrentSemanticValue = new BinaryExpressionNode(ValueStack[ValueStack.Depth-3], BinaryOperator.MoreOrEqual, ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 16: // Relation -> Factor, EqualRel, Factor
#line 44 ".\Grammar.y"
                                 { CurrentSemanticValue = new BinaryExpressionNode(ValueStack[ValueStack.Depth-3], BinaryOperator.Equal, ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 17: // Relation -> Factor, NotEqRel, Factor
#line 45 ".\Grammar.y"
                                 { CurrentSemanticValue = new BinaryExpressionNode(ValueStack[ValueStack.Depth-3], BinaryOperator.NotEqual, ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 18: // Factor -> Term
#line 48 ".\Grammar.y"
             { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 19: // Factor -> Term, Plus, Term
#line 49 ".\Grammar.y"
                       { CurrentSemanticValue = new BinaryExpressionNode(ValueStack[ValueStack.Depth-3], BinaryOperator.Add, ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 20: // Factor -> Term, Minus, Term
#line 50 ".\Grammar.y"
                        { CurrentSemanticValue = new BinaryExpressionNode(ValueStack[ValueStack.Depth-3], BinaryOperator.Subtract, ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 21: // Term -> Unary
#line 53 ".\Grammar.y"
            { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 22: // Term -> Unary, Multiplication, Unary
#line 54 ".\Grammar.y"
                                 { CurrentSemanticValue = new BinaryExpressionNode(ValueStack[ValueStack.Depth-3], BinaryOperator.Multiply, ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 23: // Term -> Unary, Division, Unary
#line 55 ".\Grammar.y"
                           { CurrentSemanticValue = new BinaryExpressionNode(ValueStack[ValueStack.Depth-3], BinaryOperator.Divide, ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 24: // Unary -> Primary
#line 58 ".\Grammar.y"
               { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 25: // Unary -> Plus, Primary
#line 59 ".\Grammar.y"
                    { CurrentSemanticValue = new UnaryExpressionNode(UnaryOperator.Plus, ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 26: // Unary -> Minus, Primary
#line 60 ".\Grammar.y"
                     { CurrentSemanticValue = new UnaryExpressionNode(UnaryOperator.Minus, ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 27: // Unary -> Not, Primary
#line 61 ".\Grammar.y"
                   { CurrentSemanticValue = new UnaryExpressionNode(UnaryOperator.Not, ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 28: // Unary -> Primary, IsKey, TypeIndicator
#line 62 ".\Grammar.y"
                                   { CurrentSemanticValue = new TypeConversionNode(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 29: // Unary -> Literal
#line 63 ".\Grammar.y"
               { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 30: // Primary -> VarName
#line 66 ".\Grammar.y"
                 { CurrentSemanticValue = new VariableNode(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 31: // Primary -> VarName, Tail
#line 67 ".\Grammar.y"
                      { CurrentSemanticValue = new AccessNode(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 32: // Primary -> ReadInt
#line 68 ".\Grammar.y"
                 { CurrentSemanticValue = new ReadIntNode(); }
#line default
        break;
      case 33: // Primary -> ReadReal
#line 69 ".\Grammar.y"
                  { CurrentSemanticValue = new ReadRealNode(); }
#line default
        break;
      case 34: // Primary -> ReadString
#line 70 ".\Grammar.y"
                    { CurrentSemanticValue = new ReadStringNode(); }
#line default
        break;
      case 35: // Primary -> OpenRoundBr, Expression, CloseRoundBr
#line 71 ".\Grammar.y"
                                             { CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
#line default
        break;
      case 36: // Tail -> Dot, IntVar
#line 74 ".\Grammar.y"
                 { CurrentSemanticValue = new AccessNode(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 37: // Tail -> Dot, VarName
#line 75 ".\Grammar.y"
                  { CurrentSemanticValue = new AccessNode(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 38: // Tail -> OpenSquareBr, Expression, CloseSquareBr
#line 76 ".\Grammar.y"
                                            { CurrentSemanticValue = new AccessNode(ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 39: // Tail -> OpenRoundBr, ExpressionList, CloseRoundBr
#line 77 ".\Grammar.y"
                                              { CurrentSemanticValue = new FunctionCallNode(ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 40: // ExpressionList -> Expression
#line 80 ".\Grammar.y"
                           { CurrentSemanticValue = new List<ExpressionNode> { ValueStack[ValueStack.Depth-1] }; }
#line default
        break;
      case 41: // ExpressionList -> ExpressionList, CommaSym, Expression
#line 81 ".\Grammar.y"
                                                  { ValueStack[ValueStack.Depth-3].Add(ValueStack[ValueStack.Depth-1]); CurrentSemanticValue = ValueStack[ValueStack.Depth-3]; }
#line default
        break;
      case 42: // Statement -> Assignment
#line 84 ".\Grammar.y"
                      { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 43: // Statement -> Print
#line 85 ".\Grammar.y"
                 { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 44: // Statement -> Return
#line 86 ".\Grammar.y"
                  { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 45: // Statement -> If
#line 87 ".\Grammar.y"
              { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 46: // Statement -> Loop
#line 88 ".\Grammar.y"
                { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 47: // Assignment -> VarName, AssignOp, Expression, SemicolonSym
#line 91 ".\Grammar.y"
                                                     { CurrentSemanticValue = new AssignmentNode(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 48: // Print -> PrintKey, ExpressionList
#line 94 ".\Grammar.y"
                               { CurrentSemanticValue = new PrintNode(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 49: // Return -> ReturnKey, Expression, SemicolonSym
#line 97 ".\Grammar.y"
                                          { CurrentSemanticValue = new ReturnNode(ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 50: // Return -> ReturnKey, SemicolonSym
#line 98 ".\Grammar.y"
                               { CurrentSemanticValue = new ReturnNode(null); }
#line default
        break;
      case 51: // If -> IfKey, Expression, ThenKey, Body, EndKey
#line 101 ".\Grammar.y"
                                         { CurrentSemanticValue = new IfNode(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2], null); }
#line default
        break;
      case 52: // If -> IfKey, Expression, ThenKey, Body, ElseKey, Body, EndKey
#line 102 ".\Grammar.y"
                                                       { CurrentSemanticValue = new IfNode(ValueStack[ValueStack.Depth-6], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 53: // Loop -> WhileKey, Expression, LoopBody
#line 105 ".\Grammar.y"
                                   { CurrentSemanticValue = new LoopNode(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 54: // Loop -> ForKey, VarName, InKey, TypeIndicator, LoopBody
#line 106 ".\Grammar.y"
                                                  { CurrentSemanticValue = new ForLoopNode(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 55: // LoopBody -> LoopKey, Body, EndKey
#line 109 ".\Grammar.y"
                              { CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
#line default
        break;
      case 56: // TypeIndicator -> IntKey
#line 112 ".\Grammar.y"
                      { CurrentSemanticValue = TypeIndicator.Int; }
#line default
        break;
      case 57: // TypeIndicator -> RealKey
#line 113 ".\Grammar.y"
                       { CurrentSemanticValue = TypeIndicator.Real; }
#line default
        break;
      case 58: // TypeIndicator -> BoolKey
#line 114 ".\Grammar.y"
                       { CurrentSemanticValue = TypeIndicator.Bool; }
#line default
        break;
      case 59: // TypeIndicator -> StringKey
#line 115 ".\Grammar.y"
                         { CurrentSemanticValue = TypeIndicator.String; }
#line default
        break;
      case 60: // TypeIndicator -> EmptyKey
#line 116 ".\Grammar.y"
                        { CurrentSemanticValue = TypeIndicator.Empty; }
#line default
        break;
      case 61: // TypeIndicator -> OpenSquareBr, CloseSquareBr
#line 117 ".\Grammar.y"
                                          { CurrentSemanticValue = TypeIndicator.Vector; }
#line default
        break;
      case 62: // TypeIndicator -> OpenCurlBr, CloseCurlBr
#line 118 ".\Grammar.y"
                                      { CurrentSemanticValue = TypeIndicator.Tuple; }
#line default
        break;
      case 63: // TypeIndicator -> FuncKey
#line 119 ".\Grammar.y"
                       { CurrentSemanticValue = TypeIndicator.Function; }
#line default
        break;
      case 64: // TypeIndicator -> Expression, DotDot, Expression
#line 120 ".\Grammar.y"
                                            { CurrentSemanticValue = TypeIndicator.Range(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 65: // Literal -> IntVar
#line 123 ".\Grammar.y"
                { CurrentSemanticValue = new LiteralNode(int.Parse(ValueStack[ValueStack.Depth-1])); }
#line default
        break;
      case 66: // Literal -> RealVar
#line 124 ".\Grammar.y"
                  { CurrentSemanticValue = new LiteralNode(double.Parse(ValueStack[ValueStack.Depth-1])); }
#line default
        break;
      case 67: // Literal -> TrueKey
#line 125 ".\Grammar.y"
                  { CurrentSemanticValue = new LiteralNode(true); }
#line default
        break;
      case 68: // Literal -> FalseKey
#line 126 ".\Grammar.y"
                   { CurrentSemanticValue = new LiteralNode(false); }
#line default
        break;
      case 69: // Literal -> StringVar
#line 127 ".\Grammar.y"
                    { CurrentSemanticValue = new LiteralNode(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 70: // Literal -> ArrayLiteral
#line 128 ".\Grammar.y"
                       { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 71: // Literal -> TupleLiteral
#line 129 ".\Grammar.y"
                       { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 72: // Literal -> FunctionLiteral
#line 130 ".\Grammar.y"
                          { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 73: // ArrayLiteral -> OpenSquareBr, ExpressionList, CloseSquareBr
#line 133 ".\Grammar.y"
                                                        { CurrentSemanticValue = new ArrayLiteralNode(ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 74: // TupleLiteral -> OpenCurlBr, TupleContent, CloseCurlBr
#line 136 ".\Grammar.y"
                                                  { CurrentSemanticValue = new TupleLiteralNode(ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 75: // TupleContent -> OpenSquareBr, TupleElementList, CloseSquareBr
#line 139 ".\Grammar.y"
                                                          { CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
#line default
        break;
      case 76: // TupleContent -> /* empty */
#line 140 ".\Grammar.y"
                          { CurrentSemanticValue = new List<TupleElementNode>(); }
#line default
        break;
      case 77: // TupleElementList -> TupleElement
#line 143 ".\Grammar.y"
                               { CurrentSemanticValue = new List<TupleElementNode> { ValueStack[ValueStack.Depth-1] }; }
#line default
        break;
      case 78: // TupleElementList -> TupleElementList, CommaSym, TupleElement
#line 144 ".\Grammar.y"
                                                        { ValueStack[ValueStack.Depth-3].Add(ValueStack[ValueStack.Depth-1]); CurrentSemanticValue = ValueStack[ValueStack.Depth-3]; }
#line default
        break;
      case 79: // TupleElement -> OpenSquareBr, VarName, AssignOp, Expression, CloseSquareBr
#line 147 ".\Grammar.y"
                                                                     { CurrentSemanticValue = new TupleElementNode(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 80: // FunctionLiteral -> FuncKey, Parameters, FunBody
#line 150 ".\Grammar.y"
                                            { CurrentSemanticValue = new FunctionLiteralNode(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 81: // Parameters -> OpenRoundBr, VarNameList, CloseRoundBr
#line 153 ".\Grammar.y"
                                                 { CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
#line default
        break;
      case 82: // Parameters -> /* empty */
#line 154 ".\Grammar.y"
                        { CurrentSemanticValue = new List<string>(); }
#line default
        break;
      case 83: // VarNameList -> VarName
#line 157 ".\Grammar.y"
                     { CurrentSemanticValue = new List<string> { ValueStack[ValueStack.Depth-1] }; }
#line default
        break;
      case 84: // VarNameList -> VarNameList, CommaSym, VarName
#line 158 ".\Grammar.y"
                                         { ValueStack[ValueStack.Depth-3].Add(ValueStack[ValueStack.Depth-1]); CurrentSemanticValue = ValueStack[ValueStack.Depth-3]; }
#line default
        break;
      case 85: // FunBody -> IsKey, Body, EndKey
#line 161 ".\Grammar.y"
                           { CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
#line default
        break;
      case 86: // FunBody -> ArrowKey, Expression
#line 162 ".\Grammar.y"
                             { CurrentSemanticValue = new FunctionBodyNode(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 87: // Body -> OpenCurlBr, DeclarationList, CloseCurlBr
#line 165 ".\Grammar.y"
                                             { CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
#line default
        break;
      case 88: // Body -> OpenCurlBr, StatementList, CloseCurlBr
#line 166 ".\Grammar.y"
                                           { CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
#line default
        break;
      case 89: // Body -> OpenCurlBr, ExpressionList, CloseCurlBr
#line 167 ".\Grammar.y"
                                            { CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
#line default
        break;
      case 90: // DeclarationList -> Declaration
#line 170 ".\Grammar.y"
                             { CurrentSemanticValue = new List<DeclarationNode> { ValueStack[ValueStack.Depth-1] }; }
#line default
        break;
      case 91: // DeclarationList -> DeclarationList, Declaration
#line 171 ".\Grammar.y"
                                            { ValueStack[ValueStack.Depth-2].Add(ValueStack[ValueStack.Depth-1]); CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
#line default
        break;
      case 92: // StatementList -> Statement
#line 174 ".\Grammar.y"
                         { CurrentSemanticValue = new List<StatementNode> { ValueStack[ValueStack.Depth-1] }; }
#line default
        break;
      case 93: // StatementList -> StatementList, Statement
#line 175 ".\Grammar.y"
                                      { ValueStack[ValueStack.Depth-2].Add(ValueStack[ValueStack.Depth-1]); CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 179 ".\Grammar.y"
 #line default
}
}
