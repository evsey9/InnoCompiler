// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// DateTime: 29/11/2023 04:03:45
// Input file <.\Grammar.y - 29/11/2023 04:03:41>

// options: lines report

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace LexicalAnalyzer
{
public enum Tokens {error=2,EOF=3,OpenCurlBr=4,CloseCurlBr=5,OpenRoundBr=6,
    CloseRoundBr=7,OpenSquareBr=8,CloseSquareBr=9,VarKey=10,AssignOp=11,TrueKey=12,
    FalseKey=13,AndOp=14,OrOp=15,XorOp=16,LessRel=17,MoreRel=18,
    LessEqRel=19,MoreEqRel=20,EqualRel=21,NotEqRel=22,Plus=23,Minus=24,
    Multiplication=25,Division=26,PrintKey=27,ReturnKey=28,IfKey=29,ThenKey=30,
    ElseKey=31,EndKey=32,WhileKey=33,ForKey=34,InKey=35,LoopKey=36,
    FuncKey=37,IntKey=38,RealKey=39,BoolKey=40,StringKey=41,EmptyKey=42,
    IsKey=43,ArrowKey=44,CommaSym=45,SemicolonSym=46,ColonSym=47,SequenceTerminator=48,
    OneLineComment=49,SpaceSym=50,NewLineSym=51,TabSym=52,UndefinedSymbol=53,ReadInt=54,
    ReadReal=55,ReadString=56,Dot=57,DotDot=58,Not=59,VarName=60,
    IntVar=61,RealVar=62,StringVar=63};

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public partial class Parser: ShiftReduceParser<AstNode, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[95];
  private static State[] states = new State[162];
  private static string[] nonTerms = new string[] {
      "Program", "StatementSeparator", "$accept", "Statement", "Declaration", 
      "Assignment", "Print", "Return", "If", "Loop", "Expression", "Relation", 
      "Factor", "Term", "Unary", "Primary", "TypeIndicator", "Literal", "Tail", 
      "ExpressionList", "Body", "LoopBody", "ArrayLiteral", "TupleLiteral", "FunctionLiteral", 
      "TupleContent", "TupleElementList", "TupleElement", "Parameters", "FunBody", 
      "VarNameList", "StatementList", };

  static Parser() {
    states[0] = new State(new int[]{10,8,60,88,27,99,28,103,29,106,33,116,34,122,3,-6},new int[]{-1,1,-4,161,-5,4,-6,86,-7,97,-8,101,-9,105,-10,115});
    states[1] = new State(new int[]{3,2,10,8,60,88,27,99,28,103,29,106,33,116,34,122},new int[]{-4,3,-5,4,-6,86,-7,97,-8,101,-9,105,-10,115});
    states[2] = new State(-1);
    states[3] = new State(-5);
    states[4] = new State(new int[]{51,6,46,7},new int[]{-2,5});
    states[5] = new State(-7);
    states[6] = new State(-2);
    states[7] = new State(-3);
    states[8] = new State(new int[]{60,9});
    states[9] = new State(new int[]{11,10,51,-13,46,-13});
    states[10] = new State(new int[]{60,38,54,46,55,47,56,48,6,49,23,52,24,54,59,56,61,59,62,60,12,61,13,62,63,63,8,65,4,68,37,78},new int[]{-11,11,-12,12,-13,15,-14,18,-15,21,-16,24,-18,58,-23,64,-24,67,-25,77});
    states[11] = new State(-14);
    states[12] = new State(new int[]{15,13,14,157,16,159,51,-18,46,-18,58,-18,9,-18,45,-18,7,-18,5,-18,30,-18,36,-18,25,-18,26,-18,23,-18,24,-18,17,-18,18,-18,19,-18,20,-18,21,-18,22,-18});
    states[13] = new State(new int[]{60,38,54,46,55,47,56,48,6,49,23,52,24,54,59,56,61,59,62,60,12,61,13,62,63,63,8,65,4,68,37,78},new int[]{-12,14,-13,15,-14,18,-15,21,-16,24,-18,58,-23,64,-24,67,-25,77});
    states[14] = new State(-15);
    states[15] = new State(new int[]{17,16,18,147,19,149,20,151,21,153,22,155,15,-19,14,-19,16,-19,51,-19,46,-19,58,-19,9,-19,45,-19,7,-19,5,-19,30,-19,36,-19,25,-19,26,-19,23,-19,24,-19});
    states[16] = new State(new int[]{60,38,54,46,55,47,56,48,6,49,23,52,24,54,59,56,61,59,62,60,12,61,13,62,63,63,8,65,4,68,37,78},new int[]{-13,17,-14,18,-15,21,-16,24,-18,58,-23,64,-24,67,-25,77});
    states[17] = new State(-20);
    states[18] = new State(new int[]{23,19,24,145,17,-26,18,-26,19,-26,20,-26,21,-26,22,-26,15,-26,14,-26,16,-26,51,-26,46,-26,58,-26,9,-26,45,-26,7,-26,5,-26,30,-26,36,-26,25,-26,26,-26});
    states[19] = new State(new int[]{60,38,54,46,55,47,56,48,6,49,23,52,24,54,59,56,61,59,62,60,12,61,13,62,63,63,8,65,4,68,37,78},new int[]{-14,20,-15,21,-16,24,-18,58,-23,64,-24,67,-25,77});
    states[20] = new State(-27);
    states[21] = new State(new int[]{25,22,26,143,23,-29,24,-29,17,-29,18,-29,19,-29,20,-29,21,-29,22,-29,15,-29,14,-29,16,-29,51,-29,46,-29,58,-29,9,-29,45,-29,7,-29,5,-29,30,-29,36,-29});
    states[22] = new State(new int[]{60,38,54,46,55,47,56,48,6,49,23,52,24,54,59,56,61,59,62,60,12,61,13,62,63,63,8,65,4,68,37,78},new int[]{-15,23,-16,24,-18,58,-23,64,-24,67,-25,77});
    states[23] = new State(-30);
    states[24] = new State(new int[]{43,25,25,-32,26,-32,23,-32,24,-32,17,-32,18,-32,19,-32,20,-32,21,-32,22,-32,15,-32,14,-32,16,-32,51,-32,46,-32,58,-32,9,-32,45,-32,7,-32,5,-32,30,-32,36,-32});
    states[25] = new State(new int[]{38,27,39,28,40,29,41,30,42,31,8,32,4,127,37,131,60,38,54,46,55,47,56,48,6,49,23,52,24,54,59,56,61,59,62,60,12,61,13,62,63,63},new int[]{-17,26,-11,138,-12,12,-13,15,-14,18,-15,21,-16,24,-18,58,-23,64,-24,67,-25,77});
    states[26] = new State(-36);
    states[27] = new State(-60);
    states[28] = new State(-61);
    states[29] = new State(-62);
    states[30] = new State(-63);
    states[31] = new State(-64);
    states[32] = new State(new int[]{9,33,60,38,54,46,55,47,56,48,6,49,23,52,24,54,59,56,61,59,62,60,12,61,13,62,63,63,8,65,4,68,37,78},new int[]{-20,34,-11,66,-12,12,-13,15,-14,18,-15,21,-16,24,-18,58,-23,64,-24,67,-25,77});
    states[33] = new State(-65);
    states[34] = new State(new int[]{9,35,45,36});
    states[35] = new State(-77);
    states[36] = new State(new int[]{60,38,54,46,55,47,56,48,6,49,23,52,24,54,59,56,61,59,62,60,12,61,13,62,63,63,8,65,4,68,37,78},new int[]{-11,37,-12,12,-13,15,-14,18,-15,21,-16,24,-18,58,-23,64,-24,67,-25,77});
    states[37] = new State(-49);
    states[38] = new State(new int[]{57,40,8,43,6,94,43,-38,25,-38,26,-38,23,-38,24,-38,17,-38,18,-38,19,-38,20,-38,21,-38,22,-38,15,-38,14,-38,16,-38,51,-38,46,-38,58,-38,9,-38,45,-38,7,-38,5,-38,30,-38,36,-38},new int[]{-19,39});
    states[39] = new State(-39);
    states[40] = new State(new int[]{61,41,60,42});
    states[41] = new State(-44);
    states[42] = new State(-45);
    states[43] = new State(new int[]{60,38,54,46,55,47,56,48,6,49,23,52,24,54,59,56,61,59,62,60,12,61,13,62,63,63,8,65,4,68,37,78},new int[]{-11,44,-12,12,-13,15,-14,18,-15,21,-16,24,-18,58,-23,64,-24,67,-25,77});
    states[44] = new State(new int[]{9,45});
    states[45] = new State(-46);
    states[46] = new State(-40);
    states[47] = new State(-41);
    states[48] = new State(-42);
    states[49] = new State(new int[]{60,38,54,46,55,47,56,48,6,49,23,52,24,54,59,56,61,59,62,60,12,61,13,62,63,63,8,65,4,68,37,78},new int[]{-11,50,-12,12,-13,15,-14,18,-15,21,-16,24,-18,58,-23,64,-24,67,-25,77});
    states[50] = new State(new int[]{7,51});
    states[51] = new State(-43);
    states[52] = new State(new int[]{60,38,54,46,55,47,56,48,6,49},new int[]{-16,53});
    states[53] = new State(-33);
    states[54] = new State(new int[]{60,38,54,46,55,47,56,48,6,49},new int[]{-16,55});
    states[55] = new State(-34);
    states[56] = new State(new int[]{60,38,54,46,55,47,56,48,6,49},new int[]{-16,57});
    states[57] = new State(-35);
    states[58] = new State(-37);
    states[59] = new State(-69);
    states[60] = new State(-70);
    states[61] = new State(-71);
    states[62] = new State(-72);
    states[63] = new State(-73);
    states[64] = new State(-74);
    states[65] = new State(new int[]{60,38,54,46,55,47,56,48,6,49,23,52,24,54,59,56,61,59,62,60,12,61,13,62,63,63,8,65,4,68,37,78},new int[]{-20,34,-11,66,-12,12,-13,15,-14,18,-15,21,-16,24,-18,58,-23,64,-24,67,-25,77});
    states[66] = new State(-48);
    states[67] = new State(-75);
    states[68] = new State(new int[]{60,74,54,46,55,47,56,48,6,49,23,52,24,54,59,56,61,59,62,60,12,61,13,62,63,63,8,65,4,68,37,78,5,-80},new int[]{-26,69,-27,71,-28,129,-11,130,-12,12,-13,15,-14,18,-15,21,-16,24,-18,58,-23,64,-24,67,-25,77});
    states[69] = new State(new int[]{5,70});
    states[70] = new State(-78);
    states[71] = new State(new int[]{45,72,5,-79});
    states[72] = new State(new int[]{60,74,54,46,55,47,56,48,6,49,23,52,24,54,59,56,61,59,62,60,12,61,13,62,63,63,8,65,4,68,37,78},new int[]{-28,73,-11,130,-12,12,-13,15,-14,18,-15,21,-16,24,-18,58,-23,64,-24,67,-25,77});
    states[73] = new State(-82);
    states[74] = new State(new int[]{11,75,57,40,8,43,6,94,43,-38,25,-38,26,-38,23,-38,24,-38,17,-38,18,-38,19,-38,20,-38,21,-38,22,-38,15,-38,14,-38,16,-38,45,-38,5,-38},new int[]{-19,39});
    states[75] = new State(new int[]{60,38,54,46,55,47,56,48,6,49,23,52,24,54,59,56,61,59,62,60,12,61,13,62,63,63,8,65,4,68,37,78},new int[]{-11,76,-12,12,-13,15,-14,18,-15,21,-16,24,-18,58,-23,64,-24,67,-25,77});
    states[76] = new State(-83);
    states[77] = new State(-76);
    states[78] = new State(new int[]{6,132,43,-87,44,-87},new int[]{-29,79});
    states[79] = new State(new int[]{43,81,44,141},new int[]{-30,80});
    states[80] = new State(-85);
    states[81] = new State(new int[]{10,8,60,88,27,99,28,103,29,106,33,116,34,122},new int[]{-21,82,-32,84,-4,114,-5,4,-6,86,-7,97,-8,101,-9,105,-10,115});
    states[82] = new State(new int[]{32,83});
    states[83] = new State(-90);
    states[84] = new State(new int[]{10,8,60,88,27,99,28,103,29,106,33,116,34,122,32,-92,31,-92},new int[]{-4,85,-5,4,-6,86,-7,97,-8,101,-9,105,-10,115});
    states[85] = new State(-94);
    states[86] = new State(new int[]{51,6,46,7},new int[]{-2,87});
    states[87] = new State(-8);
    states[88] = new State(new int[]{11,89,57,40,8,43,6,94},new int[]{-19,91});
    states[89] = new State(new int[]{60,38,54,46,55,47,56,48,6,49,23,52,24,54,59,56,61,59,62,60,12,61,13,62,63,63,8,65,4,68,37,78},new int[]{-11,90,-12,12,-13,15,-14,18,-15,21,-16,24,-18,58,-23,64,-24,67,-25,77});
    states[90] = new State(-50);
    states[91] = new State(new int[]{11,92});
    states[92] = new State(new int[]{60,38,54,46,55,47,56,48,6,49,23,52,24,54,59,56,61,59,62,60,12,61,13,62,63,63,8,65,4,68,37,78},new int[]{-11,93,-12,12,-13,15,-14,18,-15,21,-16,24,-18,58,-23,64,-24,67,-25,77});
    states[93] = new State(-51);
    states[94] = new State(new int[]{60,38,54,46,55,47,56,48,6,49,23,52,24,54,59,56,61,59,62,60,12,61,13,62,63,63,8,65,4,68,37,78},new int[]{-20,95,-11,66,-12,12,-13,15,-14,18,-15,21,-16,24,-18,58,-23,64,-24,67,-25,77});
    states[95] = new State(new int[]{7,96,45,36});
    states[96] = new State(-47);
    states[97] = new State(new int[]{51,6,46,7},new int[]{-2,98});
    states[98] = new State(-9);
    states[99] = new State(new int[]{60,38,54,46,55,47,56,48,6,49,23,52,24,54,59,56,61,59,62,60,12,61,13,62,63,63,8,65,4,68,37,78},new int[]{-20,100,-11,66,-12,12,-13,15,-14,18,-15,21,-16,24,-18,58,-23,64,-24,67,-25,77});
    states[100] = new State(new int[]{45,36,51,-52,46,-52});
    states[101] = new State(new int[]{51,6,46,7},new int[]{-2,102});
    states[102] = new State(-10);
    states[103] = new State(new int[]{60,38,54,46,55,47,56,48,6,49,23,52,24,54,59,56,61,59,62,60,12,61,13,62,63,63,8,65,4,68,37,78,51,-54,46,-54},new int[]{-11,104,-12,12,-13,15,-14,18,-15,21,-16,24,-18,58,-23,64,-24,67,-25,77});
    states[104] = new State(-53);
    states[105] = new State(-11);
    states[106] = new State(new int[]{60,38,54,46,55,47,56,48,6,49,23,52,24,54,59,56,61,59,62,60,12,61,13,62,63,63,8,65,4,68,37,78},new int[]{-11,107,-12,12,-13,15,-14,18,-15,21,-16,24,-18,58,-23,64,-24,67,-25,77});
    states[107] = new State(new int[]{30,108});
    states[108] = new State(new int[]{10,8,60,88,27,99,28,103,29,106,33,116,34,122},new int[]{-21,109,-32,84,-4,114,-5,4,-6,86,-7,97,-8,101,-9,105,-10,115});
    states[109] = new State(new int[]{32,110,31,111});
    states[110] = new State(-55);
    states[111] = new State(new int[]{10,8,60,88,27,99,28,103,29,106,33,116,34,122},new int[]{-21,112,-32,84,-4,114,-5,4,-6,86,-7,97,-8,101,-9,105,-10,115});
    states[112] = new State(new int[]{32,113});
    states[113] = new State(-56);
    states[114] = new State(-93);
    states[115] = new State(-12);
    states[116] = new State(new int[]{60,38,54,46,55,47,56,48,6,49,23,52,24,54,59,56,61,59,62,60,12,61,13,62,63,63,8,65,4,68,37,78},new int[]{-11,117,-12,12,-13,15,-14,18,-15,21,-16,24,-18,58,-23,64,-24,67,-25,77});
    states[117] = new State(new int[]{36,119},new int[]{-22,118});
    states[118] = new State(-57);
    states[119] = new State(new int[]{10,8,60,88,27,99,28,103,29,106,33,116,34,122},new int[]{-21,120,-32,84,-4,114,-5,4,-6,86,-7,97,-8,101,-9,105,-10,115});
    states[120] = new State(new int[]{32,121});
    states[121] = new State(-59);
    states[122] = new State(new int[]{60,123});
    states[123] = new State(new int[]{35,124});
    states[124] = new State(new int[]{38,27,39,28,40,29,41,30,42,31,8,32,4,127,37,131,60,38,54,46,55,47,56,48,6,49,23,52,24,54,59,56,61,59,62,60,12,61,13,62,63,63},new int[]{-17,125,-11,138,-12,12,-13,15,-14,18,-15,21,-16,24,-18,58,-23,64,-24,67,-25,77});
    states[125] = new State(new int[]{36,119},new int[]{-22,126});
    states[126] = new State(-58);
    states[127] = new State(new int[]{5,128,60,74,54,46,55,47,56,48,6,49,23,52,24,54,59,56,61,59,62,60,12,61,13,62,63,63,8,65,4,68,37,78},new int[]{-26,69,-27,71,-28,129,-11,130,-12,12,-13,15,-14,18,-15,21,-16,24,-18,58,-23,64,-24,67,-25,77});
    states[128] = new State(-66);
    states[129] = new State(-81);
    states[130] = new State(-84);
    states[131] = new State(new int[]{6,132,51,-67,46,-67,58,-67,9,-67,45,-67,7,-67,5,-67,30,-67,36,-67,25,-67,26,-67,23,-67,24,-67,17,-67,18,-67,19,-67,20,-67,21,-67,22,-67,15,-67,14,-67,16,-67,43,-87,44,-87},new int[]{-29,79});
    states[132] = new State(new int[]{60,137},new int[]{-31,133});
    states[133] = new State(new int[]{7,134,45,135});
    states[134] = new State(-86);
    states[135] = new State(new int[]{60,136});
    states[136] = new State(-89);
    states[137] = new State(-88);
    states[138] = new State(new int[]{58,139});
    states[139] = new State(new int[]{60,38,54,46,55,47,56,48,6,49,23,52,24,54,59,56,61,59,62,60,12,61,13,62,63,63,8,65,4,68,37,78},new int[]{-11,140,-12,12,-13,15,-14,18,-15,21,-16,24,-18,58,-23,64,-24,67,-25,77});
    states[140] = new State(-68);
    states[141] = new State(new int[]{60,38,54,46,55,47,56,48,6,49,23,52,24,54,59,56,61,59,62,60,12,61,13,62,63,63,8,65,4,68,37,78},new int[]{-11,142,-12,12,-13,15,-14,18,-15,21,-16,24,-18,58,-23,64,-24,67,-25,77});
    states[142] = new State(-91);
    states[143] = new State(new int[]{60,38,54,46,55,47,56,48,6,49,23,52,24,54,59,56,61,59,62,60,12,61,13,62,63,63,8,65,4,68,37,78},new int[]{-15,144,-16,24,-18,58,-23,64,-24,67,-25,77});
    states[144] = new State(-31);
    states[145] = new State(new int[]{60,38,54,46,55,47,56,48,6,49,23,52,24,54,59,56,61,59,62,60,12,61,13,62,63,63,8,65,4,68,37,78},new int[]{-14,146,-15,21,-16,24,-18,58,-23,64,-24,67,-25,77});
    states[146] = new State(-28);
    states[147] = new State(new int[]{60,38,54,46,55,47,56,48,6,49,23,52,24,54,59,56,61,59,62,60,12,61,13,62,63,63,8,65,4,68,37,78},new int[]{-13,148,-14,18,-15,21,-16,24,-18,58,-23,64,-24,67,-25,77});
    states[148] = new State(-21);
    states[149] = new State(new int[]{60,38,54,46,55,47,56,48,6,49,23,52,24,54,59,56,61,59,62,60,12,61,13,62,63,63,8,65,4,68,37,78},new int[]{-13,150,-14,18,-15,21,-16,24,-18,58,-23,64,-24,67,-25,77});
    states[150] = new State(-22);
    states[151] = new State(new int[]{60,38,54,46,55,47,56,48,6,49,23,52,24,54,59,56,61,59,62,60,12,61,13,62,63,63,8,65,4,68,37,78},new int[]{-13,152,-14,18,-15,21,-16,24,-18,58,-23,64,-24,67,-25,77});
    states[152] = new State(-23);
    states[153] = new State(new int[]{60,38,54,46,55,47,56,48,6,49,23,52,24,54,59,56,61,59,62,60,12,61,13,62,63,63,8,65,4,68,37,78},new int[]{-13,154,-14,18,-15,21,-16,24,-18,58,-23,64,-24,67,-25,77});
    states[154] = new State(-24);
    states[155] = new State(new int[]{60,38,54,46,55,47,56,48,6,49,23,52,24,54,59,56,61,59,62,60,12,61,13,62,63,63,8,65,4,68,37,78},new int[]{-13,156,-14,18,-15,21,-16,24,-18,58,-23,64,-24,67,-25,77});
    states[156] = new State(-25);
    states[157] = new State(new int[]{60,38,54,46,55,47,56,48,6,49,23,52,24,54,59,56,61,59,62,60,12,61,13,62,63,63,8,65,4,68,37,78},new int[]{-12,158,-13,15,-14,18,-15,21,-16,24,-18,58,-23,64,-24,67,-25,77});
    states[158] = new State(-16);
    states[159] = new State(new int[]{60,38,54,46,55,47,56,48,6,49,23,52,24,54,59,56,61,59,62,60,12,61,13,62,63,63,8,65,4,68,37,78},new int[]{-12,160,-13,15,-14,18,-15,21,-16,24,-18,58,-23,64,-24,67,-25,77});
    states[160] = new State(-17);
    states[161] = new State(-4);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-3, new int[]{-1,3});
    rules[2] = new Rule(-2, new int[]{51});
    rules[3] = new Rule(-2, new int[]{46});
    rules[4] = new Rule(-1, new int[]{-4});
    rules[5] = new Rule(-1, new int[]{-1,-4});
    rules[6] = new Rule(-1, new int[]{});
    rules[7] = new Rule(-4, new int[]{-5,-2});
    rules[8] = new Rule(-4, new int[]{-6,-2});
    rules[9] = new Rule(-4, new int[]{-7,-2});
    rules[10] = new Rule(-4, new int[]{-8,-2});
    rules[11] = new Rule(-4, new int[]{-9});
    rules[12] = new Rule(-4, new int[]{-10});
    rules[13] = new Rule(-5, new int[]{10,60});
    rules[14] = new Rule(-5, new int[]{10,60,11,-11});
    rules[15] = new Rule(-11, new int[]{-12,15,-12});
    rules[16] = new Rule(-11, new int[]{-12,14,-12});
    rules[17] = new Rule(-11, new int[]{-12,16,-12});
    rules[18] = new Rule(-11, new int[]{-12});
    rules[19] = new Rule(-12, new int[]{-13});
    rules[20] = new Rule(-12, new int[]{-13,17,-13});
    rules[21] = new Rule(-12, new int[]{-13,18,-13});
    rules[22] = new Rule(-12, new int[]{-13,19,-13});
    rules[23] = new Rule(-12, new int[]{-13,20,-13});
    rules[24] = new Rule(-12, new int[]{-13,21,-13});
    rules[25] = new Rule(-12, new int[]{-13,22,-13});
    rules[26] = new Rule(-13, new int[]{-14});
    rules[27] = new Rule(-13, new int[]{-14,23,-14});
    rules[28] = new Rule(-13, new int[]{-14,24,-14});
    rules[29] = new Rule(-14, new int[]{-15});
    rules[30] = new Rule(-14, new int[]{-15,25,-15});
    rules[31] = new Rule(-14, new int[]{-15,26,-15});
    rules[32] = new Rule(-15, new int[]{-16});
    rules[33] = new Rule(-15, new int[]{23,-16});
    rules[34] = new Rule(-15, new int[]{24,-16});
    rules[35] = new Rule(-15, new int[]{59,-16});
    rules[36] = new Rule(-15, new int[]{-16,43,-17});
    rules[37] = new Rule(-15, new int[]{-18});
    rules[38] = new Rule(-16, new int[]{60});
    rules[39] = new Rule(-16, new int[]{60,-19});
    rules[40] = new Rule(-16, new int[]{54});
    rules[41] = new Rule(-16, new int[]{55});
    rules[42] = new Rule(-16, new int[]{56});
    rules[43] = new Rule(-16, new int[]{6,-11,7});
    rules[44] = new Rule(-19, new int[]{57,61});
    rules[45] = new Rule(-19, new int[]{57,60});
    rules[46] = new Rule(-19, new int[]{8,-11,9});
    rules[47] = new Rule(-19, new int[]{6,-20,7});
    rules[48] = new Rule(-20, new int[]{-11});
    rules[49] = new Rule(-20, new int[]{-20,45,-11});
    rules[50] = new Rule(-6, new int[]{60,11,-11});
    rules[51] = new Rule(-6, new int[]{60,-19,11,-11});
    rules[52] = new Rule(-7, new int[]{27,-20});
    rules[53] = new Rule(-8, new int[]{28,-11});
    rules[54] = new Rule(-8, new int[]{28});
    rules[55] = new Rule(-9, new int[]{29,-11,30,-21,32});
    rules[56] = new Rule(-9, new int[]{29,-11,30,-21,31,-21,32});
    rules[57] = new Rule(-10, new int[]{33,-11,-22});
    rules[58] = new Rule(-10, new int[]{34,60,35,-17,-22});
    rules[59] = new Rule(-22, new int[]{36,-21,32});
    rules[60] = new Rule(-17, new int[]{38});
    rules[61] = new Rule(-17, new int[]{39});
    rules[62] = new Rule(-17, new int[]{40});
    rules[63] = new Rule(-17, new int[]{41});
    rules[64] = new Rule(-17, new int[]{42});
    rules[65] = new Rule(-17, new int[]{8,9});
    rules[66] = new Rule(-17, new int[]{4,5});
    rules[67] = new Rule(-17, new int[]{37});
    rules[68] = new Rule(-17, new int[]{-11,58,-11});
    rules[69] = new Rule(-18, new int[]{61});
    rules[70] = new Rule(-18, new int[]{62});
    rules[71] = new Rule(-18, new int[]{12});
    rules[72] = new Rule(-18, new int[]{13});
    rules[73] = new Rule(-18, new int[]{63});
    rules[74] = new Rule(-18, new int[]{-23});
    rules[75] = new Rule(-18, new int[]{-24});
    rules[76] = new Rule(-18, new int[]{-25});
    rules[77] = new Rule(-23, new int[]{8,-20,9});
    rules[78] = new Rule(-24, new int[]{4,-26,5});
    rules[79] = new Rule(-26, new int[]{-27});
    rules[80] = new Rule(-26, new int[]{});
    rules[81] = new Rule(-27, new int[]{-28});
    rules[82] = new Rule(-27, new int[]{-27,45,-28});
    rules[83] = new Rule(-28, new int[]{60,11,-11});
    rules[84] = new Rule(-28, new int[]{-11});
    rules[85] = new Rule(-25, new int[]{37,-29,-30});
    rules[86] = new Rule(-29, new int[]{6,-31,7});
    rules[87] = new Rule(-29, new int[]{});
    rules[88] = new Rule(-31, new int[]{60});
    rules[89] = new Rule(-31, new int[]{-31,45,60});
    rules[90] = new Rule(-30, new int[]{43,-21,32});
    rules[91] = new Rule(-30, new int[]{44,-11});
    rules[92] = new Rule(-21, new int[]{-32});
    rules[93] = new Rule(-32, new int[]{-4});
    rules[94] = new Rule(-32, new int[]{-32,-4});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 4: // Program -> Statement
#line 27 ".\Grammar.y"
                   { CurrentSemanticValue = new ProgramNode((StatementNode)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 5: // Program -> Program, Statement
#line 28 ".\Grammar.y"
                           { CurrentSemanticValue = ((ProgramNode)ValueStack[ValueStack.Depth-2]).AddStatement((StatementNode)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 6: // Program -> /* empty */
#line 29 ".\Grammar.y"
                     { CurrentSemanticValue = new ProgramNode(); }
#line default
        break;
      case 7: // Statement -> Declaration, StatementSeparator
#line 32 ".\Grammar.y"
                                          { CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
#line default
        break;
      case 8: // Statement -> Assignment, StatementSeparator
#line 33 ".\Grammar.y"
                                      { CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
#line default
        break;
      case 9: // Statement -> Print, StatementSeparator
#line 34 ".\Grammar.y"
                                  { CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
#line default
        break;
      case 10: // Statement -> Return, StatementSeparator
#line 35 ".\Grammar.y"
                                   { CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
#line default
        break;
      case 11: // Statement -> If
#line 36 ".\Grammar.y"
            { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 12: // Statement -> Loop
#line 37 ".\Grammar.y"
              { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 13: // Declaration -> VarKey, VarName
#line 40 ".\Grammar.y"
                            { CurrentSemanticValue = new DeclarationNode((StringNode)ValueStack[ValueStack.Depth-1], null); }
#line default
        break;
      case 14: // Declaration -> VarKey, VarName, AssignOp, Expression
#line 41 ".\Grammar.y"
                                               { CurrentSemanticValue = new DeclarationNode((StringNode)ValueStack[ValueStack.Depth-3], (ExpressionNode)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 15: // Expression -> Relation, OrOp, Relation
#line 44 ".\Grammar.y"
                                   { CurrentSemanticValue = new BinaryExpressionNode((ExpressionNode)ValueStack[ValueStack.Depth-3], BinaryOperator.Or, (ExpressionNode)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 16: // Expression -> Relation, AndOp, Relation
#line 45 ".\Grammar.y"
                                    { CurrentSemanticValue = new BinaryExpressionNode((ExpressionNode)ValueStack[ValueStack.Depth-3], BinaryOperator.And, (ExpressionNode)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 17: // Expression -> Relation, XorOp, Relation
#line 46 ".\Grammar.y"
                                    { CurrentSemanticValue = new BinaryExpressionNode((ExpressionNode)ValueStack[ValueStack.Depth-3], BinaryOperator.Xor, (ExpressionNode)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 18: // Expression -> Relation
#line 47 ".\Grammar.y"
                      { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 19: // Relation -> Factor
#line 50 ".\Grammar.y"
                 { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 20: // Relation -> Factor, LessRel, Factor
#line 51 ".\Grammar.y"
                                { CurrentSemanticValue = new BinaryExpressionNode((ExpressionNode)ValueStack[ValueStack.Depth-3], BinaryOperator.Less, (ExpressionNode)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 21: // Relation -> Factor, MoreRel, Factor
#line 52 ".\Grammar.y"
                                { CurrentSemanticValue = new BinaryExpressionNode((ExpressionNode)ValueStack[ValueStack.Depth-3], BinaryOperator.More, (ExpressionNode)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 22: // Relation -> Factor, LessEqRel, Factor
#line 53 ".\Grammar.y"
                                  { CurrentSemanticValue = new BinaryExpressionNode((ExpressionNode)ValueStack[ValueStack.Depth-3], BinaryOperator.LessOrEqual, (ExpressionNode)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 23: // Relation -> Factor, MoreEqRel, Factor
#line 54 ".\Grammar.y"
                                  { CurrentSemanticValue = new BinaryExpressionNode((ExpressionNode)ValueStack[ValueStack.Depth-3], BinaryOperator.MoreOrEqual, (ExpressionNode)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 24: // Relation -> Factor, EqualRel, Factor
#line 55 ".\Grammar.y"
                                 { CurrentSemanticValue = new BinaryExpressionNode((ExpressionNode)ValueStack[ValueStack.Depth-3], BinaryOperator.Equal, (ExpressionNode)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 25: // Relation -> Factor, NotEqRel, Factor
#line 56 ".\Grammar.y"
                                 { CurrentSemanticValue = new BinaryExpressionNode((ExpressionNode)ValueStack[ValueStack.Depth-3], BinaryOperator.NotEqual, (ExpressionNode)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 26: // Factor -> Term
#line 59 ".\Grammar.y"
             { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 27: // Factor -> Term, Plus, Term
#line 60 ".\Grammar.y"
                       { CurrentSemanticValue = new BinaryExpressionNode((ExpressionNode)ValueStack[ValueStack.Depth-3], BinaryOperator.Add, (ExpressionNode)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 28: // Factor -> Term, Minus, Term
#line 61 ".\Grammar.y"
                        { CurrentSemanticValue = new BinaryExpressionNode((ExpressionNode)ValueStack[ValueStack.Depth-3], BinaryOperator.Subtract, (ExpressionNode)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 29: // Term -> Unary
#line 64 ".\Grammar.y"
            { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 30: // Term -> Unary, Multiplication, Unary
#line 65 ".\Grammar.y"
                                 { CurrentSemanticValue = new BinaryExpressionNode((ExpressionNode)ValueStack[ValueStack.Depth-3], BinaryOperator.Multiply, (ExpressionNode)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 31: // Term -> Unary, Division, Unary
#line 66 ".\Grammar.y"
                           { CurrentSemanticValue = new BinaryExpressionNode((ExpressionNode)ValueStack[ValueStack.Depth-3], BinaryOperator.Divide, (ExpressionNode)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 32: // Unary -> Primary
#line 69 ".\Grammar.y"
               { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 33: // Unary -> Plus, Primary
#line 70 ".\Grammar.y"
                    { CurrentSemanticValue = new UnaryExpressionNode(UnaryOperator.Plus, (ExpressionNode)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 34: // Unary -> Minus, Primary
#line 71 ".\Grammar.y"
                     { CurrentSemanticValue = new UnaryExpressionNode(UnaryOperator.Minus, (ExpressionNode)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 35: // Unary -> Not, Primary
#line 72 ".\Grammar.y"
                   { CurrentSemanticValue = new UnaryExpressionNode(UnaryOperator.Not, (ExpressionNode)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 36: // Unary -> Primary, IsKey, TypeIndicator
#line 73 ".\Grammar.y"
                                   { CurrentSemanticValue = new TypeConversionNode((ExpressionNode)ValueStack[ValueStack.Depth-3], (TypeIndicator)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 37: // Unary -> Literal
#line 74 ".\Grammar.y"
               { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 38: // Primary -> VarName
#line 77 ".\Grammar.y"
                 { CurrentSemanticValue = new VariableNode((StringNode)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 39: // Primary -> VarName, Tail
#line 78 ".\Grammar.y"
                      { CurrentSemanticValue = new AccessNode(new VariableNode((StringNode)ValueStack[ValueStack.Depth-2]), (AccessTailNode)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 40: // Primary -> ReadInt
#line 79 ".\Grammar.y"
                 { CurrentSemanticValue = new ReadIntNode(); }
#line default
        break;
      case 41: // Primary -> ReadReal
#line 80 ".\Grammar.y"
                  { CurrentSemanticValue = new ReadRealNode(); }
#line default
        break;
      case 42: // Primary -> ReadString
#line 81 ".\Grammar.y"
                    { CurrentSemanticValue = new ReadStringNode(); }
#line default
        break;
      case 43: // Primary -> OpenRoundBr, Expression, CloseRoundBr
#line 82 ".\Grammar.y"
                                             { CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
#line default
        break;
      case 44: // Tail -> Dot, IntVar
#line 85 ".\Grammar.y"
                 { CurrentSemanticValue = new DotAccessNode(new IntegerLiteralNode(int.Parse(((StringNode)ValueStack[ValueStack.Depth-1]).GetString()))); }
#line default
        break;
      case 45: // Tail -> Dot, VarName
#line 86 ".\Grammar.y"
                  { CurrentSemanticValue = new DotAccessNode(new VariableNode((StringNode)ValueStack[ValueStack.Depth-1])); }
#line default
        break;
      case 46: // Tail -> OpenSquareBr, Expression, CloseSquareBr
#line 87 ".\Grammar.y"
                                            { CurrentSemanticValue = new BracketAccessNode((ExpressionNode)ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 47: // Tail -> OpenRoundBr, ExpressionList, CloseRoundBr
#line 88 ".\Grammar.y"
                                              { CurrentSemanticValue = new FunctionCallNode((ExpressionNode)ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 48: // ExpressionList -> Expression
#line 91 ".\Grammar.y"
                           { CurrentSemanticValue = new ExpressionNodeListNode((ExpressionNode)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 49: // ExpressionList -> ExpressionList, CommaSym, Expression
#line 92 ".\Grammar.y"
                                                  { ((ExpressionNodeListNode)ValueStack[ValueStack.Depth-3]).Add((ExpressionNode)ValueStack[ValueStack.Depth-1]); CurrentSemanticValue = ValueStack[ValueStack.Depth-3]; }
#line default
        break;
      case 50: // Assignment -> VarName, AssignOp, Expression
#line 95 ".\Grammar.y"
                                        { CurrentSemanticValue = new AssignmentNode((StringNode)ValueStack[ValueStack.Depth-3], (ExpressionNode)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 51: // Assignment -> VarName, Tail, AssignOp, Expression
#line 96 ".\Grammar.y"
                                             { CurrentSemanticValue = new ArrayAssignmentNode(new AccessNode(new VariableNode((StringNode)ValueStack[ValueStack.Depth-4]), (AccessTailNode)ValueStack[ValueStack.Depth-3]), (ExpressionNode)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 52: // Print -> PrintKey, ExpressionList
#line 99 ".\Grammar.y"
                               { CurrentSemanticValue = new PrintNode((ExpressionNodeListNode)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 53: // Return -> ReturnKey, Expression
#line 102 ".\Grammar.y"
                             { CurrentSemanticValue = new ReturnNode((ExpressionNode)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 54: // Return -> ReturnKey
#line 103 ".\Grammar.y"
                  { CurrentSemanticValue = new ReturnNode(null); }
#line default
        break;
      case 55: // If -> IfKey, Expression, ThenKey, Body, EndKey
#line 106 ".\Grammar.y"
                                         { CurrentSemanticValue = new IfNode((ExpressionNode)ValueStack[ValueStack.Depth-4], (StatementNodeListNode)ValueStack[ValueStack.Depth-2], null); }
#line default
        break;
      case 56: // If -> IfKey, Expression, ThenKey, Body, ElseKey, Body, EndKey
#line 107 ".\Grammar.y"
                                                       { CurrentSemanticValue = new IfNode((ExpressionNode)ValueStack[ValueStack.Depth-6], (StatementNodeListNode)ValueStack[ValueStack.Depth-4], (StatementNodeListNode)ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 57: // Loop -> WhileKey, Expression, LoopBody
#line 110 ".\Grammar.y"
                                   { CurrentSemanticValue = new LoopNode((ExpressionNode)ValueStack[ValueStack.Depth-2], (StatementNodeListNode)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 58: // Loop -> ForKey, VarName, InKey, TypeIndicator, LoopBody
#line 111 ".\Grammar.y"
                                                  { CurrentSemanticValue = new ForLoopNode((StringNode)ValueStack[ValueStack.Depth-4], (TypeIndicator)ValueStack[ValueStack.Depth-2], (StatementNodeListNode)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 59: // LoopBody -> LoopKey, Body, EndKey
#line 114 ".\Grammar.y"
                              { CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
#line default
        break;
      case 60: // TypeIndicator -> IntKey
#line 117 ".\Grammar.y"
                      { CurrentSemanticValue = TypeIndicator.Int; }
#line default
        break;
      case 61: // TypeIndicator -> RealKey
#line 118 ".\Grammar.y"
                       { CurrentSemanticValue = TypeIndicator.Real; }
#line default
        break;
      case 62: // TypeIndicator -> BoolKey
#line 119 ".\Grammar.y"
                       { CurrentSemanticValue = TypeIndicator.Bool; }
#line default
        break;
      case 63: // TypeIndicator -> StringKey
#line 120 ".\Grammar.y"
                         { CurrentSemanticValue = TypeIndicator.String; }
#line default
        break;
      case 64: // TypeIndicator -> EmptyKey
#line 121 ".\Grammar.y"
                        { CurrentSemanticValue = TypeIndicator.Empty; }
#line default
        break;
      case 65: // TypeIndicator -> OpenSquareBr, CloseSquareBr
#line 122 ".\Grammar.y"
                                          { CurrentSemanticValue = TypeIndicator.Vector; }
#line default
        break;
      case 66: // TypeIndicator -> OpenCurlBr, CloseCurlBr
#line 123 ".\Grammar.y"
                                      { CurrentSemanticValue = TypeIndicator.Tuple; }
#line default
        break;
      case 67: // TypeIndicator -> FuncKey
#line 124 ".\Grammar.y"
                       { CurrentSemanticValue = TypeIndicator.Function; }
#line default
        break;
      case 68: // TypeIndicator -> Expression, DotDot, Expression
#line 125 ".\Grammar.y"
                                            { CurrentSemanticValue = TypeIndicator.Range(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 69: // Literal -> IntVar
#line 128 ".\Grammar.y"
                { CurrentSemanticValue = new IntegerLiteralNode(int.Parse(((StringNode)ValueStack[ValueStack.Depth-1]).GetString())); }
#line default
        break;
      case 70: // Literal -> RealVar
#line 129 ".\Grammar.y"
                  { CurrentSemanticValue = new RealLiteralNode(double.Parse(((StringNode)ValueStack[ValueStack.Depth-1]).GetString())); }
#line default
        break;
      case 71: // Literal -> TrueKey
#line 130 ".\Grammar.y"
                  { CurrentSemanticValue = new BooleanLiteralNode(true); }
#line default
        break;
      case 72: // Literal -> FalseKey
#line 131 ".\Grammar.y"
                   { CurrentSemanticValue = new BooleanLiteralNode(false); }
#line default
        break;
      case 73: // Literal -> StringVar
#line 132 ".\Grammar.y"
                    { CurrentSemanticValue = new StringLiteralNode(((StringNode)ValueStack[ValueStack.Depth-1]).GetString()); }
#line default
        break;
      case 74: // Literal -> ArrayLiteral
#line 133 ".\Grammar.y"
                       { CurrentSemanticValue = (ArrayLiteralNode)ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 75: // Literal -> TupleLiteral
#line 134 ".\Grammar.y"
                       { CurrentSemanticValue = (TupleLiteralNode)ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 76: // Literal -> FunctionLiteral
#line 135 ".\Grammar.y"
                          { CurrentSemanticValue = (FunctionLiteralNode)ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 77: // ArrayLiteral -> OpenSquareBr, ExpressionList, CloseSquareBr
#line 138 ".\Grammar.y"
                                                        { CurrentSemanticValue = new ArrayLiteralNode((ExpressionNodeListNode)ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 78: // TupleLiteral -> OpenCurlBr, TupleContent, CloseCurlBr
#line 141 ".\Grammar.y"
                                                  { CurrentSemanticValue = new TupleLiteralNode((TupleElementNodeListNode)ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 79: // TupleContent -> TupleElementList
#line 144 ".\Grammar.y"
                               { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 80: // TupleContent -> /* empty */
#line 145 ".\Grammar.y"
                          { CurrentSemanticValue = new TupleElementNodeListNode(); }
#line default
        break;
      case 81: // TupleElementList -> TupleElement
#line 148 ".\Grammar.y"
                               { CurrentSemanticValue = new TupleElementNodeListNode((TupleElementNode)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 82: // TupleElementList -> TupleElementList, CommaSym, TupleElement
#line 149 ".\Grammar.y"
                                                        { ((TupleElementNodeListNode)ValueStack[ValueStack.Depth-3]).Add((TupleElementNode)ValueStack[ValueStack.Depth-1]); CurrentSemanticValue = ValueStack[ValueStack.Depth-3]; }
#line default
        break;
      case 83: // TupleElement -> VarName, AssignOp, Expression
#line 152 ".\Grammar.y"
                                          { CurrentSemanticValue = new TupleElementNode((StringNode)ValueStack[ValueStack.Depth-3], (ExpressionNode)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 84: // TupleElement -> Expression
#line 153 ".\Grammar.y"
                         { CurrentSemanticValue = new TupleElementNode((ExpressionNode)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 85: // FunctionLiteral -> FuncKey, Parameters, FunBody
#line 156 ".\Grammar.y"
                                            { CurrentSemanticValue = new FunctionLiteralNode((StringNodeListNode)ValueStack[ValueStack.Depth-2], (FunctionLiteralBodyNode)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 86: // Parameters -> OpenRoundBr, VarNameList, CloseRoundBr
#line 159 ".\Grammar.y"
                                                 { CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
#line default
        break;
      case 87: // Parameters -> /* empty */
#line 160 ".\Grammar.y"
                        { CurrentSemanticValue = new StringNodeListNode(); }
#line default
        break;
      case 88: // VarNameList -> VarName
#line 163 ".\Grammar.y"
                     { CurrentSemanticValue = new StringNodeListNode((StringNode)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 89: // VarNameList -> VarNameList, CommaSym, VarName
#line 164 ".\Grammar.y"
                                         { ((StringNodeListNode)ValueStack[ValueStack.Depth-3]).Add((StringNode)ValueStack[ValueStack.Depth-1]); CurrentSemanticValue = ValueStack[ValueStack.Depth-3]; }
#line default
        break;
      case 90: // FunBody -> IsKey, Body, EndKey
#line 167 ".\Grammar.y"
                           { CurrentSemanticValue = new FunctionLiteralBodyNode((StatementNodeListNode)ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 91: // FunBody -> ArrowKey, Expression
#line 168 ".\Grammar.y"
                             { CurrentSemanticValue = new FunctionLiteralBodyNode((ExpressionNode)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 92: // Body -> StatementList
#line 171 ".\Grammar.y"
                    { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 93: // StatementList -> Statement
#line 173 ".\Grammar.y"
                         { CurrentSemanticValue = new StatementNodeListNode((StatementNode)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 94: // StatementList -> StatementList, Statement
#line 174 ".\Grammar.y"
                                      { ((StatementNodeListNode)ValueStack[ValueStack.Depth-2]).Add((StatementNode)ValueStack[ValueStack.Depth-1]); CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 177 ".\Grammar.y"
 #line default
}
}
